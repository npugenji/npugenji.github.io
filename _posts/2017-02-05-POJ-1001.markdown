---layout: posttitle:  "POJ 1001 求高精度幂"categories: POJ 大数tags: POJ 大数excerpt: 为什么会这样。。---总算把这组最后一题给做了。最害怕的大数，而且这里还要处理前导0，后导0，小数点。花了将近两个小时才写完，感谢强大的string，比字符数组真的省力很多很多。总体思路还是简单的，大数加法时是c[i+j],现在变成c[i*j]了，计算的过程我就不说了。说一下小数点的处理吧。比如95.123 12根据小数的运算，小数点最终在3\*12的位置。其他具体实现看代码吧。PS:这次用了好几个string的函数* s.insert( it , p );  把字符串p插入到it(迭代器)的位置* b.substr(int start,int len)返回一个b的子串（从下标start开始，长度为len）* reverse(b.begin(),b.end());即将字符串倒置```c++#include <iostream>#include <cstring>#include <cstdio>#include <string>#include <algorithm>using namespace std;string a,b;int c[2100];int aa[2000],bb[2000];void multiply(string b,string a){    int i,j;    memset(c,0,sizeof c);    for (i=0;i<a.length();++i){        for (j=0;j<b.length();++j){            c[i+j]+=(a[i]-'0')*(b[j]-'0');            if (c[i+j]>=10){                c[i+j+1]+=c[i+j]/10;                c[i+j]%=10;            }        }    }}int main(){    int i,j,n,k,dotpos;    string::iterator it;    while (cin>>a>>n){        reverse(a.begin(),a.end());        for (it=a.begin(); it!= a.end(); ++it)            if (*it == '.'){                dotpos=it-a.begin();                a.erase(it);            }        dotpos=dotpos*n;        b=a;        for (i=0;i<n-1;i++){            multiply(b,a);            k=b.length()+a.length()+1;            b.resize(k+1);            for (int i=0;i<=k;++i)b[i]=c[i]+'0';        }        it=b.begin()+dotpos;        b.insert(it,'.');//加入小数点        for (it=b.begin();it!=b.end();++it){            if (*it!='0')break;        }        if (*it=='.')it++;        b=b.substr(it-b.begin());//去掉后导0        it=b.end()-1;        while (*it=='0')it--;        b=b.substr(0,it-b.begin()+1);        reverse(b.begin(),b.end());        cout<<b<<endl;        a.clear();    }    return 0;}```